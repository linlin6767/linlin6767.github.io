{"meta":{"title":"初见的博客","subtitle":"……","description":null,"author":"初见","url":"http://linlin6767.github.io"},"pages":[{"title":"tags","date":"2017-07-18T03:38:44.000Z","updated":"2017-07-18T03:38:44.745Z","comments":true,"path":"tags/index.html","permalink":"http://linlin6767.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"learning_curve","slug":"learning-curve","date":"2017-07-26T03:15:00.000Z","updated":"2017-07-26T03:53:04.875Z","comments":true,"path":"2017/07/26/learning-curve/","link":"","permalink":"http://linlin6767.github.io/2017/07/26/learning-curve/","excerpt":"","text":"###What is learing-curve ？learing_curve 学习曲线是我们来判断算法的一个很好的合理检验。具体来说就是以训练集示例的数量为X轴，训练集误差和交叉误差作为Y轴绘制的图表。 ###如何用 learing_curve 对模型进行判断？ 上图中增加样本数 train_score 和 test_score 开始样本较少时，往训练集增加更多的样本可以提高模型的效果，直至在3000个样本以上曲线开始平缓起来。说明模型已经处于过拟合/高方差的状态 ，这样情况下我们应该。1、获得更多训练实例2、尝试减少特征的数量3、增加正则化程度lambda的值 ###检验模型是否过拟合Python代码： ‘def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None, n_jobs=2, train_sizes=np.linspace(.1, 1., 5), verbose=0, plot=True): 查看模型是否过拟合：画出data在某模型上的learning curve.参数解释 estimator : 你用的分类器。 title : 表格的标题。 X : 输入的feature，numpy类型 y : 输入的target vector ylim : tuple格式的(ymin, ymax), 设定图像中纵坐标的最低点和最高点 cv : 做cross-validation的时候，数据分成的份数，其中一份作为cv集，其余n-1份作为training(默认为3份) n_jobs : 并行的的任务数(默认1) train_sizes, train_scores, test_scores = learning_curve( estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes, verbose=verbose) train_scores_mean = np.mean(train_scores, axis=1) train_scores_std = np.std(train_scores, axis=1) test_scores_mean = np.mean(test_scores, axis=1) test_scores_std = np.std(test_scores, axis=1) if plot: plt.figure() plt.title(title) if ylim is not None: plt.ylim(*ylim) plt.xlabel(u&quot;train_sample&quot;) plt.ylabel(u&quot;score&quot;) plt.gca().invert_yaxis() plt.grid() plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color=&quot;b&quot;) plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color=&quot;r&quot;) plt.plot(train_sizes, train_scores_mean, &apos;o-&apos;, color=&quot;b&quot;, label=u&quot;train_score&quot;) plt.plot(train_sizes, test_scores_mean, &apos;o-&apos;, color=&quot;r&quot;, label=u&quot;test_score&quot;) plt.legend(loc=&quot;best&quot;) plt.draw() plt.show() plt.gca().invert_yaxis() plt.savefig(&quot;learn_curve.jpg&quot;) midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) / 2 diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1]) return midpoint, diff `","categories":[],"tags":[]},{"title":"first","slug":"first","date":"2017-07-18T03:09:16.000Z","updated":"2017-07-18T03:17:04.814Z","comments":true,"path":"2017/07/18/first/","link":"","permalink":"http://linlin6767.github.io/2017/07/18/first/","excerpt":"","text":"##gbdt调参记录 ###首先构建基模型 gdgdf","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2017-06-29T03:53:25.222Z","updated":"2017-06-29T03:53:25.223Z","comments":true,"path":"2017/06/29/hello-world/","link":"","permalink":"http://linlin6767.github.io/2017/06/29/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}